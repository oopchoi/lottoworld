import com.xharu.combination.FilterEliminator;
import com.xharu.combination.OrderEliminator;
import com.xharu.combination.OverEliminator;
import com.xharu.combination.WonEliminator;
import com.xharu.util.ArrayListConverter;
import com.xharu.util.ArrayListCopy;

import java.io.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by bryan on 2015-11-06.
 */
public class Find4Main {
    // 회차별 당번
    private static ArrayList list = new ArrayList();

    private static int totalCount = 0;

    public static void main(String[] args) {
        try {
            BufferedReader in = new BufferedReader(new FileReader("D:\\workspace\\temp\\xharu\\src\\test.txt"));
            String s;
            int now = 0;
            boolean first = true;
            while ((s = in.readLine()) != null) {
                String[] split = s.split(",");

                Map<String, Object> map = new HashMap<String, Object>();
                int [] arr = {Integer.valueOf(split[1]), Integer.valueOf(split[2]), Integer.valueOf(split[3]), Integer.valueOf(split[4]), Integer.valueOf(split[5]), Integer.valueOf(split[6]), Integer.valueOf(split[7])};
                if(first){
                    now = Integer.valueOf(split[0]);
                    first = false;
                }
                map.put(split[0], arr);
                list.add(map);
            }
            System.out.println(list.size());
            in.close();

            // 최종 조합 변수 초기화
            ArrayList<ArrayList> completeCombo = null;
            completeCombo = getTableData("tbl_fix4_combination");

            // 연번 조합 제외기 생성
            OrderEliminator orderEliminator = new OrderEliminator();
            ArrayList orderCount = new ArrayList();
            orderCount.add(3);
            // 3연번 조합은 제거
            completeCombo = orderEliminator.remove(completeCombo, orderCount);
            System.out.println("3연번 이상 조합 제거 후 : " + completeCombo.size());

            OverEliminator overEliminator = new OverEliminator();
            ArrayList overCount = new ArrayList();
            overCount.add(4);
            // 한 번대에 4개 이상인 조합 제거
            completeCombo = overEliminator.remove(completeCombo, overCount);
            System.out.println("한 번대에 4개 이상인 조합 제거 후 : " + completeCombo.size());

            // 필터 조합 제외기 생성
            FilterEliminator filterEliminator = new FilterEliminator();
            ArrayList filterNumbers = new ArrayList();
            filterNumbers.add(new int[]{2,5,7,11,13,17,19,23,29,31,37,41,43});
            completeCombo = filterEliminator.removeByArray(completeCombo, filterNumbers, 0, 4);
            System.out.println("소수 조합 제거 후 : " + completeCombo.size());

            filterNumbers = new ArrayList();
            filterNumbers.add(new int[]{3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45});
            completeCombo = filterEliminator.removeByArray(completeCombo, filterNumbers, 0, 4);
            System.out.println("3배수 조합 제거 후 : " + completeCombo.size());

            filterNumbers = new ArrayList();
            filterNumbers.add(new int[]{1, 4, 8, 10, 14, 16, 20, 22, 25, 26, 28, 32, 34, 35, 38, 40, 44});
            completeCombo = filterEliminator.removeByArray(completeCombo, filterNumbers, 0, 4);
            System.out.println("합성수 조합 제거 후 : " + completeCombo.size());

            filterNumbers = new ArrayList();
            filterNumbers.add(new int[]{6, 9, 12, 21, 13, 31, 14, 41, 23, 32, 24, 42, 34, 43});
            completeCombo = filterEliminator.removeByArray(completeCombo, filterNumbers, 0, 4);
            System.out.println("동형수 조합 제거 후 : " + completeCombo.size());

            filterNumbers = new ArrayList();
            filterNumbers.add(new int[]{4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44});
            completeCombo = filterEliminator.removeByArray(completeCombo, filterNumbers, 0, 4);
            System.out.println("4배수 조합 제거 후 : " + completeCombo.size());

            filterNumbers = new ArrayList();
            filterNumbers.add(new int[]{5, 10, 15, 20, 25, 30, 35, 40, 45});
            completeCombo = filterEliminator.removeByArray(completeCombo, filterNumbers, 0, 4);
            System.out.println("5배수 조합 제거 후 : " + completeCombo.size());

            filterNumbers = new ArrayList();
            filterNumbers.add(new int[]{1, 3, 4, 6, 10, 15, 21, 28, 36, 45});
            completeCombo = filterEliminator.removeByArray(completeCombo, filterNumbers, 0, 4);
            System.out.println("삼각수 조합 제거 후 : " + completeCombo.size());

            filterNumbers = new ArrayList();
            filterNumbers.add(new int[]{1, 7, 9, 13, 17, 19, 25, 31, 33, 37, 41, 43});
            completeCombo = filterEliminator.removeByArray(completeCombo, filterNumbers, 0, 4);
            System.out.println("대각선 조합 제거 후 : " + completeCombo.size());

            // 당번 목록 변환 (제거하기 위함)
            ArrayListConverter converter = new ArrayListConverter();
            ArrayList<ArrayList> exceptCombo = converter.convert(list, now);
            // 당번 조합 제외기 생성
            WonEliminator eliminatorWon = new WonEliminator();
            completeCombo = eliminatorWon.getOnlyCount(4, completeCombo, exceptCombo);
            System.out.println("회귀별 당번 4개 매칭 조합 수 : " + completeCombo.size());

            // 2~5 필터
            filterNumbers = new ArrayList();
            filterNumbers.add(new int[]{1,3,4,16,18,19,23,30,32,34,40});
            completeCombo = filterEliminator.removeByArray(completeCombo, filterNumbers, 2, 5);
            System.out.println("2~5 제거 후 : " + completeCombo.size());

            // 제외수 필터
            filterNumbers = new ArrayList();
            filterNumbers.add(new int[]{9,7,20,16,33,18,25});
            completeCombo = filterEliminator.removeByArray(completeCombo, filterNumbers);
            System.out.println("제외수 제거 후 : " + completeCombo.size());

            // 0~4개 필터 (완전자동 조합)
//            filterNumbers = new ArrayList();
//            filterNumbers.add(new int[]{1,2,3,4,5,6});
//            completeCombo = filterEliminator.removeByArray(completeCombo, filterNumbers, 0, 4);
//            System.out.println("0~4필터 제거 후 : " + completeCombo.size());

            int [] arr = new int[]{4};
            completeCombo = getCombo(completeCombo, arr);


            //printCombo(completeCombo);

            // 해당 회차의 고정 2수 그룹과 비교하여 2수 미만 조합은 제거한다.
            // Combination2.java 활용
            // ArrayListCopy.java 활용
            ArrayList resultCombo = new ArrayList();
            ArrayListCopy tool = new ArrayListCopy();

            // 여기부터 복사 시작 ---------------
            exceptCombo = new ArrayList<>();
            ArrayList a0 = new ArrayList();
            a0.add(1);
            a0.add(3);
            exceptCombo.add(a0);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a1 = new ArrayList();
            a1.add(1);
            a1.add(6);
            exceptCombo.add(a1);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a2 = new ArrayList();
            a2.add(1);
            a2.add(13);
            exceptCombo.add(a2);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a3 = new ArrayList();
            a3.add(1);
            a3.add(23);
            exceptCombo.add(a3);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a4 = new ArrayList();
            a4.add(1);
            a4.add(24);
            exceptCombo.add(a4);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a5 = new ArrayList();
            a5.add(1);
            a5.add(35);
            exceptCombo.add(a5);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a6 = new ArrayList();
            a6.add(3);
            a6.add(6);
            exceptCombo.add(a6);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a7 = new ArrayList();
            a7.add(3);
            a7.add(13);
            exceptCombo.add(a7);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a8 = new ArrayList();
            a8.add(3);
            a8.add(23);
            exceptCombo.add(a8);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a9 = new ArrayList();
            a9.add(3);
            a9.add(24);
            exceptCombo.add(a9);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a10 = new ArrayList();
            a10.add(3);
            a10.add(35);
            exceptCombo.add(a10);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a11 = new ArrayList();
            a11.add(6);
            a11.add(13);
            exceptCombo.add(a11);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a12 = new ArrayList();
            a12.add(6);
            a12.add(23);
            exceptCombo.add(a12);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a13 = new ArrayList();
            a13.add(6);
            a13.add(24);
            exceptCombo.add(a13);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a14 = new ArrayList();
            a14.add(6);
            a14.add(35);
            exceptCombo.add(a14);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a15 = new ArrayList();
            a15.add(13);
            a15.add(23);
            exceptCombo.add(a15);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a16 = new ArrayList();
            a16.add(13);
            a16.add(24);
            exceptCombo.add(a16);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a17 = new ArrayList();
            a17.add(13);
            a17.add(35);
            exceptCombo.add(a17);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a18 = new ArrayList();
            a18.add(23);
            a18.add(24);
            exceptCombo.add(a18);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a19 = new ArrayList();
            a19.add(23);
            a19.add(35);
            exceptCombo.add(a19);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a20 = new ArrayList();
            a20.add(24);
            a20.add(35);
            exceptCombo.add(a20);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a21 = new ArrayList();
            a21.add(3);
            a21.add(4);
            exceptCombo.add(a21);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a22 = new ArrayList();
            a22.add(3);
            a22.add(12);
            exceptCombo.add(a22);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a23 = new ArrayList();
            a23.add(3);
            a23.add(20);
            exceptCombo.add(a23);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a24 = new ArrayList();
            a24.add(3);
            a24.add(24);
            exceptCombo.add(a24);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a25 = new ArrayList();
            a25.add(3);
            a25.add(34);
            exceptCombo.add(a25);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a26 = new ArrayList();
            a26.add(3);
            a26.add(41);
            exceptCombo.add(a26);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a27 = new ArrayList();
            a27.add(4);
            a27.add(12);
            exceptCombo.add(a27);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a28 = new ArrayList();
            a28.add(4);
            a28.add(20);
            exceptCombo.add(a28);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a29 = new ArrayList();
            a29.add(4);
            a29.add(24);
            exceptCombo.add(a29);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a30 = new ArrayList();
            a30.add(4);
            a30.add(34);
            exceptCombo.add(a30);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a31 = new ArrayList();
            a31.add(4);
            a31.add(41);
            exceptCombo.add(a31);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a32 = new ArrayList();
            a32.add(12);
            a32.add(20);
            exceptCombo.add(a32);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a33 = new ArrayList();
            a33.add(12);
            a33.add(24);
            exceptCombo.add(a33);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a34 = new ArrayList();
            a34.add(12);
            a34.add(34);
            exceptCombo.add(a34);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a35 = new ArrayList();
            a35.add(12);
            a35.add(41);
            exceptCombo.add(a35);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a36 = new ArrayList();
            a36.add(20);
            a36.add(24);
            exceptCombo.add(a36);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a37 = new ArrayList();
            a37.add(20);
            a37.add(34);
            exceptCombo.add(a37);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a38 = new ArrayList();
            a38.add(20);
            a38.add(41);
            exceptCombo.add(a38);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a39 = new ArrayList();
            a39.add(24);
            a39.add(34);
            exceptCombo.add(a39);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a40 = new ArrayList();
            a40.add(24);
            a40.add(41);
            exceptCombo.add(a40);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a41 = new ArrayList();
            a41.add(34);
            a41.add(41);
            exceptCombo.add(a41);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a42 = new ArrayList();
            a42.add(4);
            a42.add(19);
            exceptCombo.add(a42);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a43 = new ArrayList();
            a43.add(4);
            a43.add(20);
            exceptCombo.add(a43);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a44 = new ArrayList();
            a44.add(4);
            a44.add(24);
            exceptCombo.add(a44);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a45 = new ArrayList();
            a45.add(4);
            a45.add(26);
            exceptCombo.add(a45);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a46 = new ArrayList();
            a46.add(4);
            a46.add(30);
            exceptCombo.add(a46);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a47 = new ArrayList();
            a47.add(4);
            a47.add(35);
            exceptCombo.add(a47);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a48 = new ArrayList();
            a48.add(19);
            a48.add(20);
            exceptCombo.add(a48);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a49 = new ArrayList();
            a49.add(19);
            a49.add(24);
            exceptCombo.add(a49);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a50 = new ArrayList();
            a50.add(19);
            a50.add(26);
            exceptCombo.add(a50);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a51 = new ArrayList();
            a51.add(19);
            a51.add(30);
            exceptCombo.add(a51);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a52 = new ArrayList();
            a52.add(19);
            a52.add(35);
            exceptCombo.add(a52);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a53 = new ArrayList();
            a53.add(20);
            a53.add(24);
            exceptCombo.add(a53);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a54 = new ArrayList();
            a54.add(20);
            a54.add(26);
            exceptCombo.add(a54);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a55 = new ArrayList();
            a55.add(20);
            a55.add(30);
            exceptCombo.add(a55);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a56 = new ArrayList();
            a56.add(20);
            a56.add(35);
            exceptCombo.add(a56);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a57 = new ArrayList();
            a57.add(24);
            a57.add(26);
            exceptCombo.add(a57);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a58 = new ArrayList();
            a58.add(24);
            a58.add(30);
            exceptCombo.add(a58);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a59 = new ArrayList();
            a59.add(24);
            a59.add(35);
            exceptCombo.add(a59);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a60 = new ArrayList();
            a60.add(26);
            a60.add(30);
            exceptCombo.add(a60);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a61 = new ArrayList();
            a61.add(26);
            a61.add(35);
            exceptCombo.add(a61);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a62 = new ArrayList();
            a62.add(30);
            a62.add(35);
            exceptCombo.add(a62);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a63 = new ArrayList();
            a63.add(1);
            a63.add(3);
            exceptCombo.add(a63);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a64 = new ArrayList();
            a64.add(1);
            a64.add(16);
            exceptCombo.add(a64);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a65 = new ArrayList();
            a65.add(1);
            a65.add(18);
            exceptCombo.add(a65);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a66 = new ArrayList();
            a66.add(1);
            a66.add(32);
            exceptCombo.add(a66);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a67 = new ArrayList();
            a67.add(1);
            a67.add(40);
            exceptCombo.add(a67);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a68 = new ArrayList();
            a68.add(1);
            a68.add(41);
            exceptCombo.add(a68);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a69 = new ArrayList();
            a69.add(3);
            a69.add(16);
            exceptCombo.add(a69);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a70 = new ArrayList();
            a70.add(3);
            a70.add(18);
            exceptCombo.add(a70);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a71 = new ArrayList();
            a71.add(3);
            a71.add(32);
            exceptCombo.add(a71);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a72 = new ArrayList();
            a72.add(3);
            a72.add(40);
            exceptCombo.add(a72);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a73 = new ArrayList();
            a73.add(3);
            a73.add(41);
            exceptCombo.add(a73);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a74 = new ArrayList();
            a74.add(16);
            a74.add(18);
            exceptCombo.add(a74);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a75 = new ArrayList();
            a75.add(16);
            a75.add(32);
            exceptCombo.add(a75);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a76 = new ArrayList();
            a76.add(16);
            a76.add(40);
            exceptCombo.add(a76);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a77 = new ArrayList();
            a77.add(16);
            a77.add(41);
            exceptCombo.add(a77);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a78 = new ArrayList();
            a78.add(18);
            a78.add(32);
            exceptCombo.add(a78);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a79 = new ArrayList();
            a79.add(18);
            a79.add(40);
            exceptCombo.add(a79);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a80 = new ArrayList();
            a80.add(18);
            a80.add(41);
            exceptCombo.add(a80);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a81 = new ArrayList();
            a81.add(32);
            a81.add(40);
            exceptCombo.add(a81);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a82 = new ArrayList();
            a82.add(32);
            a82.add(41);
            exceptCombo.add(a82);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a83 = new ArrayList();
            a83.add(40);
            a83.add(41);
            exceptCombo.add(a83);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a84 = new ArrayList();
            a84.add(4);
            a84.add(18);
            exceptCombo.add(a84);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a85 = new ArrayList();
            a85.add(4);
            a85.add(19);
            exceptCombo.add(a85);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a86 = new ArrayList();
            a86.add(4);
            a86.add(23);
            exceptCombo.add(a86);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a87 = new ArrayList();
            a87.add(4);
            a87.add(30);
            exceptCombo.add(a87);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a88 = new ArrayList();
            a88.add(4);
            a88.add(34);
            exceptCombo.add(a88);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a89 = new ArrayList();
            a89.add(4);
            a89.add(41);
            exceptCombo.add(a89);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a90 = new ArrayList();
            a90.add(18);
            a90.add(19);
            exceptCombo.add(a90);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a91 = new ArrayList();
            a91.add(18);
            a91.add(23);
            exceptCombo.add(a91);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a92 = new ArrayList();
            a92.add(18);
            a92.add(30);
            exceptCombo.add(a92);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a93 = new ArrayList();
            a93.add(18);
            a93.add(34);
            exceptCombo.add(a93);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a94 = new ArrayList();
            a94.add(18);
            a94.add(41);
            exceptCombo.add(a94);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a95 = new ArrayList();
            a95.add(19);
            a95.add(23);
            exceptCombo.add(a95);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a96 = new ArrayList();
            a96.add(19);
            a96.add(30);
            exceptCombo.add(a96);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a97 = new ArrayList();
            a97.add(19);
            a97.add(34);
            exceptCombo.add(a97);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a98 = new ArrayList();
            a98.add(19);
            a98.add(41);
            exceptCombo.add(a98);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a99 = new ArrayList();
            a99.add(23);
            a99.add(30);
            exceptCombo.add(a99);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a100 = new ArrayList();
            a100.add(23);
            a100.add(34);
            exceptCombo.add(a100);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a101 = new ArrayList();
            a101.add(23);
            a101.add(41);
            exceptCombo.add(a101);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a102 = new ArrayList();
            a102.add(30);
            a102.add(34);
            exceptCombo.add(a102);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a103 = new ArrayList();
            a103.add(30);
            a103.add(41);
            exceptCombo.add(a103);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a104 = new ArrayList();
            a104.add(34);
            a104.add(41);
            exceptCombo.add(a104);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a105 = new ArrayList();
            a105.add(4);
            a105.add(13);
            exceptCombo.add(a105);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a106 = new ArrayList();
            a106.add(4);
            a106.add(19);
            exceptCombo.add(a106);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a107 = new ArrayList();
            a107.add(4);
            a107.add(20);
            exceptCombo.add(a107);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a108 = new ArrayList();
            a108.add(4);
            a108.add(32);
            exceptCombo.add(a108);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a109 = new ArrayList();
            a109.add(4);
            a109.add(38);
            exceptCombo.add(a109);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a110 = new ArrayList();
            a110.add(4);
            a110.add(42);
            exceptCombo.add(a110);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a111 = new ArrayList();
            a111.add(13);
            a111.add(19);
            exceptCombo.add(a111);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a112 = new ArrayList();
            a112.add(13);
            a112.add(20);
            exceptCombo.add(a112);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a113 = new ArrayList();
            a113.add(13);
            a113.add(32);
            exceptCombo.add(a113);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a114 = new ArrayList();
            a114.add(13);
            a114.add(38);
            exceptCombo.add(a114);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a115 = new ArrayList();
            a115.add(13);
            a115.add(42);
            exceptCombo.add(a115);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a116 = new ArrayList();
            a116.add(19);
            a116.add(20);
            exceptCombo.add(a116);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a117 = new ArrayList();
            a117.add(19);
            a117.add(32);
            exceptCombo.add(a117);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a118 = new ArrayList();
            a118.add(19);
            a118.add(38);
            exceptCombo.add(a118);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a119 = new ArrayList();
            a119.add(19);
            a119.add(42);
            exceptCombo.add(a119);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a120 = new ArrayList();
            a120.add(20);
            a120.add(32);
            exceptCombo.add(a120);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a121 = new ArrayList();
            a121.add(20);
            a121.add(38);
            exceptCombo.add(a121);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a122 = new ArrayList();
            a122.add(20);
            a122.add(42);
            exceptCombo.add(a122);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a123 = new ArrayList();
            a123.add(32);
            a123.add(38);
            exceptCombo.add(a123);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a124 = new ArrayList();
            a124.add(32);
            a124.add(42);
            exceptCombo.add(a124);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            exceptCombo = new ArrayList<>();
            ArrayList a125 = new ArrayList();
            a125.add(38);
            a125.add(42);
            exceptCombo.add(a125);
            resultCombo = eliminatorWon.removeUnderCount(2, tool.copy(completeCombo), exceptCombo);
            totalCount += resultCombo.size();
            printCombo(resultCombo);
            // 여기까지 복사 끝 ---------------

            // 마지막은 엑셀에서 중복 데이터 제거해서 최종 조합 뽑아내야 함.
            System.out.println(totalCount);
        } catch (IOException e) {
            System.err.println(e);
            System.exit(1);
        }

    }

    private static void printCombo(ArrayList<ArrayList> list){
        if(list == null){
            System.out.println("list is null");
        }
        int cnt = 0;
        try {
            BufferedWriter out = new BufferedWriter(new FileWriter("D:\\workspace\\temp\\xharu\\src\\test2.txt"));
            for(ArrayList i:list){
                for(int m=0; m<i.size(); m++) {
                    int x = (Integer)i.get(m);
                    if(m==i.size()-1){
                        System.out.print(x + "\n");
                        out.write(x + "\n");
                    }else{
                        System.out.print(x + ", ");
                        out.write(x + ", ");
                    }
                }
                cnt++;
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        //System.out.println("Count : "+cnt);
    }

    private static ArrayList getTableData(String tableName){
        try{
            Class.forName("com.mysql.jdbc.Driver");
            Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/book_ex",
                    "zerock",
                    "zerock");

            String query = "select * from " + tableName;
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(query);
            ArrayList list = new ArrayList();
            while (rs.next())
            {
                ArrayList item = new ArrayList();
                item.add(rs.getInt("num_1"));
                item.add(rs.getInt("num_2"));
                item.add(rs.getInt("num_3"));
                item.add(rs.getInt("num_4"));
                list.add(item);
            }
            st.close();
            return list;

        }catch (Exception e){
            e.printStackTrace();
        }
        return null;
    }

    private static ArrayList getCombo(ArrayList list, int [] alwaysNumbers){
        System.out.println("\nstart ------------------");
        System.out.println("- 고정수 -");
        for(int n=0; n<alwaysNumbers.length; n++) {
            int x = alwaysNumbers[n];
            if(alwaysNumbers.length>1)
                System.out.print(x + ", ");
            else
                System.out.print(x);
        }
        System.out.println("\n고정수 제거하기 전 list.size():"+list.size());

        ArrayList newList = new ArrayList();
        for(int m=list.size()-1; m>=0; m--){
            ArrayList item = (ArrayList)list.get(m);
            int cnt = 0;
            for(int n=0; n<alwaysNumbers.length; n++){
                int x = alwaysNumbers[n];
                for(int k=0; k<item.size(); k++){
                    int y = (int)item.get(k);
                    if(x==y){
                        cnt++;
                    }
                }
            }
            if(alwaysNumbers.length>cnt){
                //list.remove(m);
            }else{
                ArrayList newItem = new ArrayList();
                for(int k=0; k<item.size(); k++){
                    int y = (int)item.get(k);
                    newItem.add(y);
                }
                newList.add(newItem);
            }
        }

        System.out.println("고정수 제거한 후 newList.size():"+newList.size());

        ArrayList returnCombo = new ArrayList();
        for(int i=0; returnCombo.size()<newList.size(); i++){
            ArrayList item = (ArrayList)newList.get(i);
            boolean f = false;
            for(int j=0; j<returnCombo.size(); j++){
                ArrayList t0 = (ArrayList)returnCombo.get(j);
                int c = 0;
                for(int m=0; m<item.size(); m++){
                    int x = (int)item.get(m);
                    for(int n=0; n<t0.size(); n++){
                        int y = (int)t0.get(n);
                        if(x==y) c++;
                    }
                }
                // c가 4이면 동일한 조합이므로
                if(c==4){
                    f=true;
                    break;
                }
            }
            if(i==0||!f) {
                returnCombo.add(item);
            }
        }

        //totalCount += count;
        return returnCombo;
    }
}
